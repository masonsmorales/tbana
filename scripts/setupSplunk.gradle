import com.splunk.Args
import com.splunk.Receiver
import com.splunk.Service

buildscript { //Adds splunk to gradle path
    repositories {
        mavenRepo name: 'ext-release-local', url: 'http://splunk.artifactoryonline.com/splunk/ext-releases-local'
    }
    dependencies {
        classpath 'com.splunk:splunk:1.1.0'
    }

    project.ext{
        buildCache= file('build/cache')
        splunkDir= file('build/cache/splunk')
        splunkClusterDir= file('build/splunks')
    }

    buildCache.mkdirs()
    splunkClusterDir.mkdirs()

}
def instances= ['master']//, 'slave1', 'slave2']//, 'slave3']
ext.splunkAuth= "-auth admin:changeIt"

task setUpCluster(dependsOn: ['getIp','copyAll']) << {
    instances.eachWithIndex { String instance, int i ->
        //copySplunk("${splunkClusterDir}/${instance}")
        def splunk= "$splunkClusterDir/$instance"
        startAndSetupSplunk(splunk, instance, 9000+i, 9050+i)
    }

    if(instances.size() > 1){
        setAsMaster("$splunkClusterDir/${instances[0]}/bin/splunk", 2, 2)

        def master_ip= getIp.output()
        if (master_ip.isEmpty())
            throw new IOException("No ip available!")
        instances[1..-1].eachWithIndex{instance, int i ->
            println "Setting up slave: $instance, $i"
            setAsSlave("$splunkClusterDir/$instance/bin/splunk", master_ip, 9050, 9100+i)
        }
    }

    pushDataToSplunk(9050, 5)
}

setUpCluster.onlyIf{
    return tasks.copyAll.didWork
}

test.dependsOn setUpCluster

task getIp(type:Exec){

    commandLine 'sh', '-c', / ifconfig -a | perl -ne 'if ( m\/^\s*inet (?:addr:)?([\d.]+).*?cast\/ ) { print qq($1); exit 0; }'/

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task copyAll(dependsOn: ['extractSplunk']) {
    onlyIf {
        return getCurrentSplunks().size() == 0
    }

    doLast {
        def filesToCopy = copySpec {
            from splunkDir
        }

        instances.each { dest ->
            copy {
                with filesToCopy
                into "$splunkClusterDir/$dest"
            }
        }
    }
}

task extractSplunk {

    def dest= new File(buildCache, 'splunk')
    outputs.dir dest

    doLast {
        def tarPath= 'splunk_tgz/splunk*.tgz'
        def proc= ['sh', '-c', "tar xf $tarPath -C $buildCache.path"].execute()
        proc.consumeProcessOutput(System.out, System.err)
        proc.waitFor()
    }
}

def startAndSetupSplunk(path, name, web_port, splunkd_port) {
    def splunkDir= file(path)
    assert splunkDir.isDirectory()
    //def name= splunkDir.getParent() //Better?
    def splunk= "$path/bin/splunk"
    def proc= ("$splunk start --accept-license --answer-yes").execute()
    proc.consumeProcessOutput(System.out, System.err)
    proc.waitFor() //Maybe choose default timeout?

    println '----SETUP----'
    [
            "edit user admin -password changeIt -auth admin:changeme",   //changeDefaultPassword
            "set servername $name ${project.splunkAuth}",
            "restart splunkd",
            "set web-port $web_port ${project.splunkAuth}",
            "restart splunkweb",
            "set splunkd-port $splunkd_port ${project.splunkAuth}",
            "restart"
    ].each{ command ->
        println "***Command: $command"
        proc= ("$splunk $command").execute()
        proc.consumeProcessOutput(System.out, System.err)
        proc.waitFor()
    }
}

def setAsMaster(splunk, replication_factor, search_factor){
    ("$splunk edit cluster-config -mode master" +
            " -replication_factor $replication_factor" +
            " -search_factor $search_factor $splunkAuth").execute().waitFor()
    "$splunk restart".execute().waitFor()
}

def setAsSlave(splunk, master_ip, master_port, replication_port){
    def proc= ("$splunk edit cluster-config -mode slave" +
            " -master_uri https://$master_ip:$master_port" +
            " -replication_port $replication_port $splunkAuth").execute()
    proc.consumeProcessOutput(System.out, System.err)
    proc.waitFor()
    "$splunk restart splunkd".execute().waitFor()
}

def pushDataToSplunk(port, numberOfResults) { //AND TEST FILE
    def testDir= 'build/resources/test/'
    file(testDir).mkdirs()
    def outputFile= new File(testDir, 'splunkMockData.txt')
    outputFile.text= ""

    Service service= Service.connect([hostname: "localhost", port: port, username:"admin",password:"changeIt"])
    Receiver receiver= service.getReceiver()
    def logArgs= [sourcetype:"mock"]
    (0..<numberOfResults).each {int i ->
        def dataStr= "count=$i"
        receiver.log("main", logArgs as Args, dataStr)
        outputFile.text= "$dataStr\n" + outputFile.text
        Thread.sleep(1)
    }

    outputFile.text= "_raw\n" + outputFile.text
}

task startAllSplunks << {
    callEachSplunkWith("start")
}

startAllSplunks.mustRunAfter setUpCluster

test << {
    callEachSplunkWith('stop')
}

def callEachSplunkWith(args){
    def currentSplunks= getCurrentSplunks()
    if (currentSplunks.size() == 0)
        throw new FileNotFoundException("No splunk instances where found in $splunkClusterDir")

    currentSplunks.each { instance ->
        def splunk= "$splunkClusterDir/$instance/bin/splunk"
        if (file(splunk).exists()){
            def proc= "$splunk $args".execute()
            proc.consumeProcessOutput(System.out, System.err)
            proc.waitFor()
        }
    }
}

def getCurrentSplunks() {
    return splunkClusterDir.listFiles().name
}

task cleanSplunkInstallations(type:Delete, dependsOn: 'stopAllSplunks') {
    delete splunkClusterDir
}

task stopAllSplunks << {
    callEachSplunkWith("stop")
}

clean.dependsOn('stopAllSplunks')

task ss << {
    callEachSplunkWith("status")
}