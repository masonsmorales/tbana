apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'
apply from: 'scripts/setupSplunk.gradle'


/*Clojure*/
buildscript {
    repositories {
        mavenRepo name: 'clojars', url: 'http://clojars.org/repo'
    }
    dependencies {
        classpath 'clojuresque:clojuresque:1.5.8'
    }
}
apply plugin: 'clojure'

group = 'com.yolodata.tbana'
version = '1.0.0'

warnOnReflection = true
aotCompile = true
/*******************/

repositories {
    mavenLocal()
    mavenCentral()
    clojarsRepo()

    mavenRepo name: 'Spray repo', url: 'http://repo.spray.io/'
    mavenRepo name: 'akka', url: 'http://repo.akka.io/releases/'
    mavenRepo name: 'conjars', url: 'http://conjars.org/repo/'
    mavenRepo name: 'ext-release-local', url: 'http://splunk.artifactoryonline.com/splunk/ext-releases-local'
}

dependencies {
    /*Clojure and Storm*/
    compile 'org.clojure:clojure:1.4.0'
    compile 'storm:storm:0.8.2'
    compile 'opencsv-clj:opencsv-clj:1.2.1'
    /*******************/

    compile 'org.scala-lang:scala-library:2.9.3'
    compile 'org.scala-lang:scala-compiler:2.9.3'
    testCompile 'org.scalatest:scalatest_2.9.3:1.9.1'

    compile 'org.spark-project:spark-core_2.9.3:0.7.2'

    compile 'org.codehaus.groovy:groovy-all:2.0.5'

    compile( group: 'cascading', name: 'cascading-core', version: '2.1.6' )
    compile( group: 'cascading', name: 'cascading-test', version: '2.0.8' )
    compile( group: 'cascading', name: 'cascading-hadoop', version: '2.1.6' )
    compile( group: 'cascading', name: 'cascading-local', version: '2.1.6' )

    compile( group: 'org.mockito', name: 'mockito-all', version:'1.9.5')

    compile( group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5')
    compile( group: 'junit', name: 'junit', version: '4.11')

    compile( group: 'org.apache.hadoop', name: 'hadoop-core', version: '1.2.0' ) {
        exclude group: 'ant'
        exclude group: 'junit'
        exclude group: 'oro'
    }

    compile 'joda-time:joda-time:2.2'
    compile 'org.joda:joda-convert:1.3.1'

    compile( group: 'com.splunk', name: 'splunk', version: '1.1.0' )
    compile files('lib/shuttl-0.8.4.jar')
}

// Add integration test source sets
sourceSets {
    //TODO: doesn't work for clojure?!
    integrationTest { sourceSet ->
        ['clojure', 'scala', 'java'].each {
            if (!sourceSet.hasProperty(it)) {
                println "WARN $it not found"
                return
            }
            sourceSet."$it".srcDir file("src/integration-test/${it}")
        }
    }

    examples { sourceSet ->
        ['scala', 'java'].each {
            if (!sourceSet.hasProperty(it)) {
                println "WARN $it not found"
                return
            }
            sourceSet."$it".srcDir file("examples/src/main/${it}")
        }
        sourceSet.resources.srcDir file("examples/resources")
    }
}

task examplesJar(type: Jar, dependsOn: classes){

    from sourceSets.examples.output
//    from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
//        exclude "META-INF/*.SF"
//        exclude "META-INF/*.DSA"
//        exclude "META-INF/*.RSA"
//    }


    classifier 'examples'
}
build.dependsOn(examplesJar)
// Setup dependencies for integration testing
dependencies {
    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
}

dependencies {
    //examplesCompile sourceSets.examples.output
    examplesCompile sourceSets.main.output
    examplesCompile configurations.compile
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest.dependsOn setUpCluster, startAllSplunks
//check.dependsOn integrationTest

task wrapper(type: Wrapper) {
    gradleVersion = '1.6'
}

task copyToLibManaged( type: Copy ) {
    into "lib_managed"
    from configurations.runtime
}

jar { dependsOn copyToLibManaged }
